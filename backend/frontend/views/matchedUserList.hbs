<main>
  <h1 class="h1-mached">Mached Users</h1>
  <div class="sidebar">
    {{#each matchedUsers}}
    <div class="user-mached">
      <span class="status-mached {{#if _doc.is_online}}online{{else}}offline{{/if}}" data-user-id="{{_doc._id}}"></span>
      <a href="#" class="username-mached" data-user-id="{{_doc._id}}" onclick="showChatWindow('{{_doc._id}}', '{{_doc.firstName}}')">
        {{_doc.firstName}}
      </a>
    </div>
    {{/each}}
  </div>
  <div class="chat-window hidden">
    <div class="chat-header">
      <h4 id="chat-username"></h4>
    </div>
    <div class="chat-messages">
      <!-- chat messages will go here -->
    </div>
    <input type="text" id="message-input" placeholder="Type a message...">
    <button id="send-message-btn">Send Message</button>
  </div>


  <script>

    function scrollChat() {
      const chatMessages = document.querySelector('.chat-messages');
      chatMessages.scrollTop = chatMessages.scrollHeight;
    }


    const userObj = JSON.parse('{{{ userObj }}}');
    console.log(userObj);
    const senderID = userObj._id;
    const socket = io('/user-namespace', {
      auth: {
        token: senderID,
      }
    });
    let receiverID;

    socket.on('getOnlineUser', function(data) {
      console.log("online");
      const statusElement = document.querySelector(`.status[data-user-id="${data.user_id}"]`);
      if (statusElement) {
        statusElement.classList.remove('offline');
        statusElement.classList.add('online');
      }
    });

    socket.on('getOfflineUser', function(data) {
      console.log("offline");
      const statusElement = document.querySelector(`.status[data-user-id="${data.user_id}"]`);
      if (statusElement) {
        statusElement.classList.remove('online');
        statusElement.classList.add('offline');
      }
    });


    socket.on('loadNewChat', function(data){
      console.log(data);
      if(senderID === data.receiver_id && receiverID == data.sender_id){
        let html = `
          <div class = "distance-user-chat">
              <h5>`+data.message+`</h5>
          </div>`;
            //append the html in the chat container
        const chatMessages = document.querySelector('.chat-messages');
        chatMessages.insertAdjacentHTML('beforeend', html);
        scrollChat();
      }
      });

    function showChatWindow(userId, username) {
      // Get the chat window
      const chatWindow = document.querySelector('.chat-window');
      // Check if the chat window is already open for the clicked user
      if (chatWindow.dataset.userId === userId) {
        // If it is, hide it
        chatWindow.classList.toggle('hidden');
      } else {
        // If not, show it and set the current user ID and username
        clearChatMessages();
        chatWindow.classList.remove('hidden');
        chatWindow.dataset.userId = userId;
        document.getElementById('chat-username').innerText = username;
        receiverID = userId; 

        //firing a socket event
        socket.emit('existsChat', {
          sender_id : senderID,
          receiver_id : receiverID
        })
      }
    }

    const sendMessageBtn = document.getElementById('send-message-btn');
    const messageInput = document.getElementById('message-input');

    sendMessageBtn.addEventListener('click', async (event) => {
    event.preventDefault(); // prevent default form submission behavior
    const message = messageInput.value.trim();
    if (message) {
      try {
        const response = await fetch('/api/v1/chats/save-chat', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({
            sender_id: senderID,
            receiver_id: receiverID,
            message
          })
        });
        const result = await response.json();
        console.log(result);
        if(result.data.success){
          const chat = result.data.message;
          //write the code to insert
          let html = `
          <div class = "current-user-chat">
              <h5>`+chat+`</h5>
          </div>`;
          messageInput.value = ''; // clear the message input box

          //append the html in chat container
          //append the html in chat container
          const chatMessages = document.querySelector('.chat-messages');
          chatMessages.insertAdjacentHTML('beforeend', html);
          scrollChat();

          socket.emit('newChat', result.data);
        }
      } catch (error) {
          console.error(error);
        }
      }
    });

    function clearChatMessages() {
      const chatMessages = document.querySelector('.chat-messages');
      chatMessages.innerHTML = ''; // Clear the chat messages
    }

    //load old chats
    socket.on('loadChats', function(data) {
      const chats = data.chats;
      const chatMessages = document.querySelector('.chat-messages');

      let html = '';

      chats.forEach(chat => {
        let addClass = '';

        if (chat.sender_id === senderID) {
          addClass = 'current-user-chat';
        } else {
          addClass = 'distance-user-chat';
        }

        html += `
          <div class="${addClass}">
            <h5>${chat.message}</h5>
          </div>
        `;
      });

      // Append the HTML to the .chat-messages container
      chatMessages.insertAdjacentHTML('beforeend', html);
      scrollChat();

      
  });
  


  </script>
</main>
